package pgo.model.tla;

import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

/**
 * 
 * This visitor is a stop-gap measure to ensure that the rest of
 * the compiler can understand the expanded AST generated by
 * TLAParser. Everything here is a hack based on looking
 * at existing code and trying to meet the expectations of
 * the typechecker and code generator.
 *
 */
public class PGoTLABackwardsCompatibilityASTConverter extends PGoTLAExpressionVisitor<PGoTLAExpression> {
	public PGoTLABackwardsCompatibilityASTConverter() {}
	
	/**
	 * @param expr PGoTLAVariadic to wrap in a PGoTLASet for typechecking reasons
	 * @return the PGoTLASet
	 */
	private static PGoTLAExpression wrapVariadicSet(PGoTLAExpression expr) {
		List<PGoTLAExpression> theExp = new ArrayList<>();
		theExp.add(expr);
		return new PGoTLASet(theExp, expr.getLine());
	}
	
	private static PGoTLAExpression wrapVariadicFunction(PGoTLAExpression expr) {
		List<PGoTLAExpression> theExp = new ArrayList<>();
		theExp.add(expr);
		return new PGoTLAArray(theExp, expr.getLine());
	}
	
	@Override
	public PGoTLAExpression visit(PGoTLABinOp expr) {
		String op = expr.getOperation();
		
		switch(op) {
			case "+":
			case "-":
			case "*":
			case "/":
			case "\\div":
			case "%":
			case "^":
				return new PGoTLASimpleArithmetic(
						op,
						expr.getLHS().walk(this),
						expr.getRHS().walk(this),
						expr.getLine());
			case "/\\":
			case "\\land":
			case "\\lor":
			case "\\/":
			case "~":
			case "\\lnot":
			case "\\neg":
			case "#":
			case "/=":
			case "<":
			case ">":
			case "<=":
			case "=<":
			case "\\leq":
			case ">=":
			case "\\geq":
			case "==":
			case "=":
				return new PGoTLABoolOp(
						op,
						expr.getLHS().walk(this),
						expr.getRHS().walk(this),
						expr.getLine());
			case "..":
				return new PGoTLASequence(
						expr.getLHS().walk(this),
						expr.getRHS().walk(this),
						expr.getLine());
			case "\\cup":
			case "\\union":
			case "\\cap":
			case "\\intersect":
			case "\\in":
			case "\\notin":
			case "\\subseteq":
			case "\\":
				return new PGoTLASetOp(op,
						expr.getLHS().walk(this),
						expr.getRHS().walk(this),
						expr.getLine());
			default:
				throw new RuntimeException("unimplemented binop conversion for operator "+op);
		}
	}
	
	@Override
	public PGoTLAExpression visit(PGoTLABool bool) {
		return bool;
	}
	
	@Override
	public PGoTLAExpression visit(PGoTLAVariable expr) {
		return expr;
	}
	
	@Override
	public PGoTLAExpression visit(PGoTLATuple expr) {
		List<PGoTLAExpression> items = new ArrayList<>();
		for(PGoTLAExpression e: expr.getItems()) {
			items.add(e.walk(this));
		}
		return new PGoTLAArray(items, expr.getLine());
	}
	
	@Override
	public PGoTLAExpression visit(PGoTLANumber expr) {
		return expr;
	}
	
	@Override
	public PGoTLAExpression visit(PGoTLAExpression.PGoTLADefault expr) {
		return expr;
	}
	
	@Override
	public PGoTLAExpression visit(PGoTLAOperatorCall expr) {
		// this is semantically wrong, but is understood as such
		// but the rest of the pipeline
		// TODO: fix this
		List<PGoTLAExpression> args = new ArrayList<>();
		for(PGoTLAExpression a : expr.getArgs()) {
			args.add(a.walk(this));
		}
		return new PGoTLAFunctionCall(
				new PGoTLAVariable(expr.getName(), expr.getLine()),
				args,
				expr.getLine());
	}
	
	@Override
	public PGoTLAExpression visit(PGoTLASetRefinement expr) {
		Vector<PGoTLAExpression> left = new Vector<>();
		left.add(new PGoTLASetOp("\\in",
				expr.getIdent().toExpression().walk(this),
				expr.getFrom().walk(this),
				expr.getLine()));
		
		return wrapVariadicSet(new PGoTLAVariadic(":", left, expr.getWhen().walk(this), false, expr.getLine()));
	}
	
	@Override
	public PGoTLAExpression visit(PGoTLAFunction expr) {
		List<PGoTLAExpression> left = new ArrayList<>();
		for(PGoTLAQuantifierBound qb : expr.getArguments()) {
			left.add(new PGoTLASetOp(
					"\\in",
					new PGoTLAVariable(qb.getIds().get(0), expr.getLine()),
					qb.getSet().walk(this),
					expr.getLine()));
		}
		return wrapVariadicFunction(
				new PGoTLAVariadic("|->", left, expr.getBody().walk(this), false, expr.getLine()));
	}
	
	@Override
	public PGoTLAExpression visit(PGoTLAFunctionCall expr) {
		List<PGoTLAExpression> params = new ArrayList<>();
		for(PGoTLAExpression e : expr.getParams()) {
			params.add(e.walk(this));
		}
		return new PGoTLAFunctionCall(
				new PGoTLAVariable(expr.getName(), expr.getLine()),
				params,
				expr.getLine());
	}
	
	@Override
	public PGoTLAExpression visit(PGoTLASetComprehension expr) {
		Vector<PGoTLAExpression> right = new Vector<>();
		for(PGoTLAQuantifierBound b : expr.getBounds()) {
			right.add(new PGoTLASetOp("\\in",
					// the .get(0) here corresponds to the downstream
					// code's inability to handle cases with multiple
					// variables or tuples
					new PGoTLAVariable(b.getIds().get(0), expr.getLine()).walk(this),
					b.getSet().walk(this),
					expr.getLine()));
		}
		
		return wrapVariadicSet(new PGoTLAVariadic(":", right, expr.getBody().walk(this), true, expr.getLine()));
	}
	
	@Override
	public PGoTLAExpression visit(PGoTLAString expr) {
		return expr;
	}
	
	@Override
	public PGoTLAExpression visit(PGoTLAUnary expr) {
		return new PGoTLAUnary(expr.getToken(), expr.getArg().walk(this), expr.getLine());
	}
	
	@Override
	public PGoTLAExpression visit(PGoTLAQuantifiedExistential expr) {
		Vector<PGoTLAExpression> vars = new Vector<>();
		for(PGoTLAQuantifierBound b: expr.getIds()) {
			vars.add(new PGoTLASetOp("\\in",
					// the .get(0) here corresponds to the downstream
					// code's inability to handle cases with multiple
					// variables or tuples
					new PGoTLAVariable(b.getIds().get(0), expr.getLine()),
					b.getSet().walk(this),
					expr.getLine()));
		}
		
		return new PGoTLAUnary("\\E",
				new PGoTLAVariadic(":",
						vars,
						expr.getBody().walk(this),
						false,
						expr.getLine()),
				expr.getLine());
	}
	
	@Override
	public PGoTLAExpression visit(PGoTLASet expr) {
		List<PGoTLAExpression> contents = new ArrayList<>();
		for(PGoTLAExpression e : expr.getContents()) {
			contents.add(e.walk(this));
		}
		return new PGoTLASet(contents, expr.getLine());
	}
}
