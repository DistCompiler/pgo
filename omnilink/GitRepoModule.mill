package build.omnilink

import mill.*

trait GitRepoModule extends Module:
  repo =>
  def origin: T[String]

  trait CommitHash extends Module:
    def origin: T[String] = repo.origin()
    def commitHash: T[String]
    def dir: T[PathRef] = Task:
      os.call(
        List[os.Shellable](
          "git",
          "clone",
          origin(),
        ),
        cwd = Task.dest,
        stdout = os.Inherit,
        stderr = os.Inherit,
      )
      val cloneDir = os.list(Task.dest).filter(os.isDir).head
      os.call(
        List[os.Shellable](
          "git",
          "-c",
          "advice.detachedHead=false",
          "checkout",
          commitHash(),
        ),
        cwd = cloneDir,
        stdout = os.Inherit,
        stderr = os.Inherit,
      )
      PathRef(cloneDir)
    end dir
  end CommitHash
end GitRepoModule
