package build.omnilink

import mill.*
import mill.util.Jvm
import mill.api.{BuildCtx, ModuleRef}

import build.omnilink.GitRepo

object evalDB extends build.omnilink.EvalDB:
  def createTablesSQL =
    Task.Source(build.omnilink.moduleDir / "createTables.sql")
  def dbPath = os.sub / "omnilink" / "eval.duckdb"
end evalDB

trait TConfig extends TracingConfig:
  def evalDB = ModuleRef(build.omnilink.evalDB)
end TConfig

trait TraceEvalSpecModule extends Module:
  def spec: T[PathRef]
  def specHPP: T[PathRef] = Task:
    val destFile = Task.dest / "workload-meta.hpp"
    build.omnilink.tool
      .runner()
      .run(
        List[os.Shellable](
          "gen-hpp",
          spec().path,
          "--out-file",
          destFile,
        ),
      )
    PathRef(destFile)
  end specHPP
end TraceEvalSpecModule

def omnilinkLibHPP: T[PathRef] =
  Task.Source(os.sub / "omnilink-lib.hpp")

object wiredtiger extends TraceEvalSpecModule:
  object repo extends GitRepo:
    def origin = "git@github.com:wiredtiger/wiredtiger.git"
    object release_11_3_1 extends CommitHash:
      def commitHash = "05c56015a42154ac8145366678a4f8eb419b5933"
  end repo

  def spec = Task.Source(os.sub / "Storage.tla")
  def mainCPP = Task.Source(os.sub / "main.cpp")

  object release_11_3_1 extends TracingConfig:
    def commitHash = ModuleRef(repo.release_11_3_1)
    def specToValidate = spec()
    def specToValidateMC =
      Task.Source(wiredtiger.moduleDir / "MCStorageValidate.tla")
    def specToValidateMCConfig =
      Task.Source(wiredtiger.moduleDir / "MCStorageValidate.cfg")
    def configs = Seq(
      Config(
        threadCount = 5,
        operationCount = 100,
        tracesNeeded = 25,
      ),
    )
  end release_11_3_1

  trait TracingConfig extends TConfig:
    def wtBuild: T[PathRef] = Task:
      os.call(
        cmd = List[os.Shellable](
          "cmake",
          commitHash().dir().path,
          "-DENABLE_STATIC=1",
          "-G",
          "Ninja",
        ),
        cwd = Task.dest,
        stdout = os.Inherit,
        stderr = os.Inherit,
      )
      os.call(
        cmd = List[os.Shellable](
          "cmake",
          "--build",
          Task.dest,
        ),
        stdout = os.Inherit,
        stderr = os.Inherit,
      )
      PathRef(Task.dest)
    end wtBuild

    def wtInstall: T[PathRef] = Task:
      os.call(
        List[os.Shellable](
          "cmake",
          "--install",
          wtBuild().path,
          "--prefix",
          Task.dest,
        ),
        stderr = os.Inherit,
        stdout = os.Inherit,
      )
      PathRef(Task.dest)
    end wtInstall

    def tracingExecutable: T[PathRef] = Task:
      val includes = List(
        wtInstall().path / "include",
        specHPP().path / os.up,
        omnilinkLibHPP().path / os.up,
      )
      val libs = List(
        "pthread",
        "rt",
        "dl",
      )
      val exeDest = Task.dest / "main"
      val p = os.proc(
        "g++",
        "-O3",
        mainCPP().path, // put this up here or linker fails occur
        wtInstall().path / "lib" / "libwiredtiger.a",
        includes.map(p => s"-I$p"),
        libs.map(l => s"-l$l"),
        "-o",
        exeDest,
      )
      println(s"$$ ${p.commandChunks.mkString(" ")}")
      p.call(
        stdout = os.Inherit,
        stderr = os.Inherit,
      )
      PathRef(exeDest)
    end tracingExecutable
  end TracingConfig
end wiredtiger

object setbench extends TraceEvalSpecModule:
  object repo extends GitRepo:
    def origin = "git@github.com:ubc-systopia/augmented-chromatic-trees.git"
    object paper1 extends CommitHash:
      def commitHash = "cb4562bb8459b848685738fb1f00c2a015b56be2"
  end repo
  def spec = Task.Source(os.sub / "ChromaticTree.tla")
  def mainCPP = Task.Source(os.sub / "main.cpp")

  object brown_ext_chromatic_augment_lf extends TracingConfig:
    def dsSubFolder = os.sub / "ds" / "brown_ext_chromatic_augment_lf"
    def commitHash = ModuleRef(repo.paper1)
    def configs = Seq(
      Config(
        threadCount = 5,
        operationCount = 100,
        tracesNeeded = 30,
      ),
    )
  end brown_ext_chromatic_augment_lf

  trait TracingConfig extends TConfig:
    def specToValidate = spec()
    def specToValidateMC =
      Task.Source(setbench.moduleDir / "MCChromaticTreeValidate.tla")
    def specToValidateMCConfig =
      Task.Source(setbench.moduleDir / "MCChromaticTreeValidate.cfg")

    def dsSubFolder: T[os.SubPath]

    def tracingExecutable: T[PathRef] = Task:
      val src = commitHash().dir().path
      val includes = List(
        src / "common",
        src / "common" / "recordmgr",
        src / dsSubFolder(),
        specHPP().path / os.up,
        omnilinkLibHPP().path / os.up,
      )
      val exeDest = Task.dest / "main"
      val p = os.proc(
        "g++",
        "-O3",
        includes.map(i => s"-I$i"),
        mainCPP().path,
        "-o",
        exeDest,
      )
      println(s"$$ ${p.commandChunks.mkString(" ")}")
      p.call(
        stdout = os.Inherit,
        stderr = os.Inherit,
      )
      PathRef(exeDest)
    end tracingExecutable

    def validateConfigDir: T[PathRef] =
      Task.Source(setbench.moduleDir / "validate_cfg")
  end TracingConfig
end setbench
